
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000174  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ae6  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000094a  00000000  00000000  00000d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032b  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000019b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c8  00000000  00000000  000019d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a8  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  c4:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void){
	
    DDRB = 0xff;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	84 b9       	out	0x04, r24	; 4
	PORTC |= (1<<2);
  d0:	88 b1       	in	r24, 0x08	; 8
  d2:	84 60       	ori	r24, 0x04	; 4
  d4:	88 b9       	out	0x08, r24	; 8
    int count = 0;
    while (1) 
    {
		count = 0;
		PORTB |= (1<<3);
  d6:	85 b1       	in	r24, 0x05	; 5
  d8:	88 60       	ori	r24, 0x08	; 8
  da:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	34 e3       	ldi	r19, 0x34	; 52
  e0:	4c e0       	ldi	r20, 0x0C	; 12
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	30 40       	sbci	r19, 0x00	; 0
  e6:	40 40       	sbci	r20, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x16>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x20>
  ec:	00 00       	nop
		_delay_ms(250);
		PORTB ^= (1<<3);
  ee:	95 b1       	in	r25, 0x05	; 5
  f0:	88 e0       	ldi	r24, 0x08	; 8
  f2:	89 27       	eor	r24, r25
  f4:	85 b9       	out	0x05, r24	; 5
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	9e e9       	ldi	r25, 0x9E	; 158
  fa:	24 e2       	ldi	r18, 0x24	; 36
  fc:	81 50       	subi	r24, 0x01	; 1
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	20 40       	sbci	r18, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x30>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x3a>
 106:	00 00       	nop
		_delay_ms(750);
		
	if((PINC & 0x08) ==0x08){
 108:	33 9b       	sbis	0x06, 3	; 6
 10a:	e5 cf       	rjmp	.-54     	; 0xd6 <main+0xa>
 10c:	2b c0       	rjmp	.+86     	; 0x164 <main+0x98>
		while (count < 1){
			PORTB |= (1<<2);
 10e:	25 b1       	in	r18, 0x05	; 5
 110:	24 60       	ori	r18, 0x04	; 4
 112:	25 b9       	out	0x05, r18	; 5
			PORTB |= (1<<3);
 114:	25 b1       	in	r18, 0x05	; 5
 116:	28 60       	ori	r18, 0x08	; 8
 118:	25 b9       	out	0x05, r18	; 5
 11a:	3f ef       	ldi	r19, 0xFF	; 255
 11c:	4e e9       	ldi	r20, 0x9E	; 158
 11e:	24 e2       	ldi	r18, 0x24	; 36
 120:	31 50       	subi	r19, 0x01	; 1
 122:	40 40       	sbci	r20, 0x00	; 0
 124:	20 40       	sbci	r18, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x54>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x5e>
 12a:	00 00       	nop
			_delay_ms(750);
			PORTB ^= (1<<3);
 12c:	35 b1       	in	r19, 0x05	; 5
 12e:	28 e0       	ldi	r18, 0x08	; 8
 130:	23 27       	eor	r18, r19
 132:	25 b9       	out	0x05, r18	; 5
 134:	3f ef       	ldi	r19, 0xFF	; 255
 136:	44 e3       	ldi	r20, 0x34	; 52
 138:	2c e0       	ldi	r18, 0x0C	; 12
 13a:	31 50       	subi	r19, 0x01	; 1
 13c:	40 40       	sbci	r20, 0x00	; 0
 13e:	20 40       	sbci	r18, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0x6e>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0x78>
 144:	00 00       	nop
			_delay_ms(250);
			PORTB |= (1<<2);
 146:	25 b1       	in	r18, 0x05	; 5
 148:	24 60       	ori	r18, 0x04	; 4
 14a:	25 b9       	out	0x05, r18	; 5
 14c:	3f ef       	ldi	r19, 0xFF	; 255
 14e:	4e e9       	ldi	r20, 0x9E	; 158
 150:	24 e2       	ldi	r18, 0x24	; 36
 152:	31 50       	subi	r19, 0x01	; 1
 154:	40 40       	sbci	r20, 0x00	; 0
 156:	20 40       	sbci	r18, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0x86>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0x90>
 15c:	00 00       	nop
			_delay_ms(750);
			PORTB = 0x00;
 15e:	15 b8       	out	0x05, r1	; 5
			count++;
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	02 c0       	rjmp	.+4      	; 0x168 <main+0x9c>
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
		_delay_ms(250);
		PORTB ^= (1<<3);
		_delay_ms(750);
		
	if((PINC & 0x08) ==0x08){
		while (count < 1){
 168:	18 16       	cp	r1, r24
 16a:	19 06       	cpc	r1, r25
 16c:	84 f6       	brge	.-96     	; 0x10e <main+0x42>
 16e:	b3 cf       	rjmp	.-154    	; 0xd6 <main+0xa>

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
